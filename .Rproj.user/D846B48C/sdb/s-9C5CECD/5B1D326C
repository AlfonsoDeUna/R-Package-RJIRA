{
    "collab_server" : "",
    "contents" : "\n##============================================================================\n## RJIRA - R interface with JIRA instance\n## CopyRight (c) 2016\n## @author Alfonso de UÃ±a del Brio <briofons@gmail.com\n## \n## Interface with JIRA with the idea\n## to get information that you need to start making\n## study about your issues.\n## \n## This program is free software: you can redistribute it and/or modify\n## it under the terms of the GNU General Public License as published by\n## the Free Software Foundation, either version 3 of the License, or\n## (at your option) any later version.\n##\n## This program is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n## GNU General Public License for more details.\n##\n## You should have received a copy of the GNU General Public License\n## along with this program.  If not, see <http://www.gnu.org/licenses/>.\n##=============================================================================\nlibrary(RCurl)\nlibrary(jsonlite)\n\n##' \n##' It creates the connection without OAUTH authentication\n##' \n##' @param URL Base JIRA direction\n##' @param port Port JIRA (by default 8080)\n##' @param version (Rest API JIRA)\n##' \n##' @return Base URL for use REST API\n##' \nsimpleConnection <- function (JIRAServer, port, version=NULL) {\n  \n  if (is.null(version)|| (version != 2 &  version !=1)) {\n    rapiVersion <- \"latatest\"\n  }else{\n    rapiVersion <- version\n  }\n  simpleURL <- cat(\"https://\",JIRAServer,\":\",port,\"/rest/api/\", rapiVersion,\"/\", sep=\"\")\n  return(simpleURL)\n  \n}\n\n#' Create a row from most important dataframe from issue \n#'\n#' key: Issue Key\n#' summary: Short description from issue\n#' issueType name: name from issue type\n#' issueType id: internal id\n#' status name: the last status name\n#' status id: internal status\n#' reporter short name\n#' reporter email address\n#' reporter long name\n#' assgnee short name\n#' assignee email\n#' assignee long name\n#' internal identificator project\n#' project name\n#' number of comments from issue\n#' @param information retrieving data frame from issue\n#' @return list\ncreateRow <- function (dat) {\n  row <- list( convertNull2NA(dat$key),\n               convertNull2NA(dat$fields$summary),\n               convertNull2NA(dat$fields$issuetype$name),\n               convertNull2NA(dat$fields$issuetype$id),\n               convertNull2NA(dat$fields$status$name),\n               convertNull2NA(dat$fields$status$id),\n               convertNull2NA(dat$fields$reporter$name),\n               convertNull2NA(dat$fields$reporter$emailAddress),\n               convertNull2NA(dat$reporter$displayName),\n               convertNull2NA(dat$assignee$name),\n               convertNull2NA(dat$fields$assignee$emailAddress),\n               convertNull2NA(dat$fields$assignee$displayName),\n               convertNull2NA(dat$fields$project$id),\n               convertNull2NA(dat$fields$project$name),\n               convertNull2NA(dat$comment$total))\n  return(row)\n}\n\n##'  getIssue\n##' \n##'  For retrieving the most interesting information from \n##'  request issue to dataframe\n##'   \n##'   @param conn\n##'   @param key\n##'   @param type (by default GET)\n##'   \ngetIssue <- function (conn, key, type = \"GET\") {\n  con<-cat(conn,\"/issue/\",key,sep=\"\")\n  campaignJSON = getURL(url = paste(conn,'issue/',key,sep=\"\") ,.opts = list(ssl.verifypeer = FALSE))\n  jsIssue <- fromJSON(campaignJSON)\n  dt <- data.frame (createRow (jsIssue), stringsAsFactors=FALSE)\n  cols <- c(   \"key\",\n               \"summary\",\n               \"issueType.name\",\n               \"issueType.IsSubtask\",\n               \"status.name\",\n               \"status.id\",\n               \"reporter.name\",\n               \"reporter.mail\",\n               \"reporter.display.name\",\n               \"assignee.name\",\n               \"assignee.mail\",\n               \"assignee.display.name\",\n               \"project.id\",\n               \"project.name\",\n               \"comments.total\"\n  )\n  colnames(dt)<-cols\n  return(dt)\n  \n}\n\n\n##'\n##'    for testing https://jira.atlassian.com/rest/api/latest/search?\n##'    \n##'\n##'    @param conn\n##'    @param String with the format of jql (JIRA Query Language)\n##'        \n##'                \nfreeQuery <-function (conn, jql = NULL) {\n  campaignJSON = getURL(url = paste(conn,jql,sep=\"\") ,.opts = list(ssl.verifypeer = FALSE))\n  jsIssue <- fromJSON(campaignJSON)\n  lista<-jsIssue$issue$key\n  cont <-0\n  for (i in lista){\n    if (cont == 0){\n      data<-getIssue (conn, i)\n    }\n    else{\n      print (i)\n      campaignJSON = getURL(url = paste(conn,'issue/',i,sep=\"\") ,.opts = list(ssl.verifypeer = FALSE))\n      jsIssue <- fromJSON(campaignJSON)\n      data<-rbind(data,createRow(jsIssue))\n    }\n    cont <- cont +1\n  }\n  return (data)\n}\n\n#' Convert all null to NA\n#' internal function\nconvertNull2NA <- function (x) {\n  if (is.null(x))\n    return(NA)\n  else\n    return(x)\n}",
    "created" : 1456787091792.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3308962096",
    "id" : "5B1D326C",
    "lastKnownWriteTime" : 1465251534,
    "last_content_update" : 1465251534861,
    "path" : "C:/Desarrollo/R/R-Package-RJIRA/R/RJIRA.R",
    "project_path" : "R/RJIRA.R",
    "properties" : {
    },
    "relative_order" : 0,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}