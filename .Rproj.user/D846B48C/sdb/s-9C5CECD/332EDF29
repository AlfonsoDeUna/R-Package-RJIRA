{
    "collab_server" : "",
    "contents" : "##' -----------------------------------------------------------------\n##' R interface with JIRA instance\n##' @author Alfonso de UÃ±a del Brio <briofons@gmail.com\n##' \n##' Interface with JIRA with the idea\n##' to get information that you need to start making\n##' study about your issues.\n##' \n##' \n##'\n##'\n\nlibrary(RCurl)\nlibrary(jsonlite)\n\n## Create the connection without OAUTH authentication\nsimpleConnection <- function (URL, port, version=NULL) {\n  \n  if (is.null(version)|| (version != 2 &  version !=1))\n    rapiVersion <- \"latatest\"\n  else\n    rapiVersion <- version\n  \n  simpleURL <- cat(\"https://\",URL,\":\",port,\"/rest/api/\", rapiVersion,\"/\", sep=\"\")\n  \n  return(simpleURL)\n}\n\ncreateRow <- function (dat) {\n  row <- list( convertNull2NA(dat$key),\n               convertNull2NA(dat$fields$summary),\n               convertNull2NA(dat$fields$issuetype$name),\n               convertNull2NA(dat$fields$issuetype$id),\n               convertNull2NA(dat$fields$status$name),\n               convertNull2NA(dat$fields$status$id),\n               convertNull2NA(dat$fields$reporter$name),\n               convertNull2NA(dat$fields$reporter$emailAddress),\n               convertNull2NA(dat$reporter$displayName),\n               convertNull2NA(dat$assignee$name),\n               convertNull2NA(dat$fields$assignee$emailAddress),\n               convertNull2NA(dat$fields$assignee$displayName),\n               convertNull2NA(dat$fields$project$id),\n               convertNull2NA(dat$fields$project$name),\n               convertNull2NA(dat$comment$total))\n  return(row)\n}\n\n# For retrieving the most interesting information from \n# request issue to dataframe\ngetIssue <- function (conn, key, type = \"GET\") {\n  \n  con<-cat(conn,\"/issue/\",key,sep=\"\")\n  campaignJSON = getURL(url = paste(conn,'issue/',key,sep=\"\") ,.opts = list(ssl.verifypeer = FALSE))\n  jsIssue <- fromJSON(campaignJSON)\n  \n  #create a table\n  \n  \n  dt <- data.frame (createRow (jsIssue), stringsAsFactors=FALSE)\n  \n  cols <- c(   \"key\",\n               \"summary\",\n               \"issueType.name\",\n               \"issueType.IsSubtask\",\n               \"status.name\",\n               \"status.id\",\n               \"reporter.name\",\n               \"reporter.mail\",\n               \"reporter.display.name\",\n               \"assignee.name\",\n               \"assignee.mail\",\n               \"assignee.display.name\",\n               \"project.id\",\n               \"project.name\",\n               \"comments.total\"\n  )\n  \n  colnames(dt)<-cols\n  \n  return(dt)\n  \n}\n\n## for testing https://jira.atlassian.com/rest/api/latest/search?\nfreeQuery <-function (conn, jql = NULL) {\n  \n  campaignJSON = getURL(url = paste(conn,jql,sep=\"\") ,.opts = list(ssl.verifypeer = FALSE))\n  jsIssue <- fromJSON(campaignJSON)\n  lista<-jsIssue$issue$key\n  cont <-0\n  for (i in lista){\n    if (cont == 0){\n      data<-getIssue (conn, i)\n    }\n    else{\n      print (i)\n      campaignJSON = getURL(url = paste(conn,'issue/',i,sep=\"\") ,.opts = list(ssl.verifypeer = FALSE))\n      jsIssue <- fromJSON(campaignJSON)\n      data<-rbind(data,createRow(jsIssue))\n    }\n    cont <- cont +1\n  }\n  return (data)\n  \n}\n\nconvertNull2NA <- function (x) {\n  if (is.null(x))\n    return(NA)\n  else\n    return(x)\n}\n\n",
    "created" : 1465249806343.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "106950440",
    "id" : "332EDF29",
    "lastKnownWriteTime" : 2484628536874007931,
    "last_content_update" : 1465249816796,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}